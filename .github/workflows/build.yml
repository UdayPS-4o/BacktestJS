name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build . -t my-application

      - name: Create Docker container without running it
        run: docker create --name app_build my-application

      - name: Copy build artifacts from Docker container
        run: |
          docker cp app_build:/usr/src/app/dist ./dist

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-artifact
          path: ./dist

  package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-artifact
          path: ./dist

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.19.1
          cache: 'npm'

      - name: Install pkg globally
        run: npm install -g pkg

      - name: Set PKG_TARGET environment variable
        run: |
          echo "PKG_TARGET=$(if [ ${{ runner.os }} = 'Windows' ]; then echo 'node18-win-x64'; elif [ ${{ runner.os }} = 'macOS' ]; then echo 'node18-macos-x64'; else echo 'node18-linux-x64'; fi)" >> $GITHUB_ENV
        shell: bash

      - name: Build executable using pkg
        run: |
          pkg -t ${{ env.PKG_TARGET }} ./dist/main.js
        env:
          PKG_CACHE_PATH: './.pkg-cache'

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-exe
          path: |
            ./*.exe
            ./*-linux
            ./*-macos

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ github.ref == 'refs/heads/main' }} && ${{ matrix.os == 'ubuntu-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
    
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref == 'refs/heads/main' }} && ${{ matrix.os == 'ubuntu-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.exe
          asset_name: my-application-${{ runner.os }}.exe
          asset_content_type: application/octet-stream